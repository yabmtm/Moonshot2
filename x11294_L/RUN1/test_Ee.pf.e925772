                      :-) GROMACS - mdrun_mpi, 2018.8 (-:

                            GROMACS is written by:
     Emile Apol      Rossen Apostolov      Paul Bauer     Herman J.C. Berendsen
    Par Bjelkmar    Aldert van Buuren   Rudi van Drunen     Anton Feenstra  
  Gerrit Groenhof    Aleksei Iupinov   Christoph Junghans   Anca Hamuraru   
 Vincent Hindriksen Dimitrios Karkoulis    Peter Kasson        Jiri Kraus    
  Carsten Kutzner      Per Larsson      Justin A. Lemkul    Viveca Lindahl  
  Magnus Lundborg   Pieter Meulenhoff    Erik Marklund      Teemu Murtola   
    Szilard Pall       Sander Pronk      Roland Schulz     Alexey Shvetsov  
   Michael Shirts     Alfons Sijbers     Peter Tieleman    Teemu Virolainen 
 Christian Wennberg    Maarten Wolf   
                           and the project leaders:
        Mark Abraham, Berk Hess, Erik Lindahl, and David van der Spoel

Copyright (c) 1991-2000, University of Groningen, The Netherlands.
Copyright (c) 2001-2017, The GROMACS development team at
Uppsala University, Stockholm University and
the Royal Institute of Technology, Sweden.
check out http://www.gromacs.org for more information.

GROMACS is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License
as published by the Free Software Foundation; either version 2.1
of the License, or (at your option) any later version.

GROMACS:      mdrun_mpi, version 2018.8
Executable:   /gpfs/opt/apps/gromacs-2018.8/bin/mdrun_mpi
Data prefix:  /gpfs/opt/apps/gromacs-2018.8
Working dir:  /work/tug27224/MOON2/projects/x11294_L/RUN1
Command line:
  mdrun_mpi -maxh 47 -s prod.tpr


Back Off! I just backed up md.log to ./#md.log.1#
Compiled SIMD: SSE4.1, but for this host/run AVX2_256 might be better (see
log).
The current CPU can measure timings more accurately than the code in
mdrun_mpi was configured to use. This might affect your simulation
speed as accurate timings are needed for load-balancing.
Please consider rebuilding mdrun_mpi with the GMX_USE_RDTSCP=ON CMake option.
Reading file prod.tpr, VERSION 2018.8 (single precision)

Multiple energy groups is not implemented for GPUs, falling back to the CPU. For better performance, run on the GPU without energy groups and then do gmx mdrun -rerun option on the trajectory with an energy group .tpr file.
Changing nstlist from 10 to 25, rlist from 0.935 to 1.043


Using 12 MPI processes
Using 1 OpenMP thread per MPI process


Non-default thread affinity set probably by the OpenMP library,
disabling internal thread affinity

NOTE: There are issues with expanded ensemble and certain combination of nstexpanded and nstcalcenergy, setting nstcalcenergy to 1
starting mdrun 'Generic title'
-1 steps, infinite ps.

step 50 Turning on dynamic load balancing, because the performance loss due to load imbalance is 19.6 %.


step 20000 Turning off dynamic load balancing, because it is degrading performance.


step 25000 Turning on dynamic load balancing, because the performance loss due to load imbalance is 20.1 %.


step 35000 Turning off dynamic load balancing, because it is degrading performance.


step 37500 Will no longer try dynamic load balancing, as it degraded performance.


Step 58734575: Run time exceeded 46.530 hours, will terminate the run

 Dynamic load balancing report:
 DLB got disabled because it was unsuitable to use.
 Average load imbalance: 153.6%.
 The balanceable part of the MD step is 28%, load imbalance is computed from this.
 Part of the total run time spent waiting due to load imbalance: 42.5%.

NOTE: 42.5 % of the available CPU time was lost due to load imbalance
      in the domain decomposition.
      You might want to use dynamic load balancing (option -dlb.)


               Core t (s)   Wall t (s)        (%)
       Time:  2010097.485   167508.124     1200.0
                         1d22h31:48
                 (ns/day)    (hour/ns)
Performance:      121.180        0.198

GROMACS reminds you: "There's Still Time to Change the Road You're On" (Led Zeppelin)

